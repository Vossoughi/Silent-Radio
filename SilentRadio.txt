// Author:   Kaveh Vossoughi
// Date  :   12/01/2016
// Objective : This is an Application which reads News lines
// from a text file and display them line by line. Displayed
// line moves to the right or left with speed and color options. 
//****************************************************************
package graphicsJava;

import javafx.application.*;
import javafx.beans.value.ObservableValue;
import javafx.scene.*;
import javafx.stage.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.scene.canvas.*;
import javafx.scene.paint.*;
import javafx.scene.text.*;
import java.util.*;
import java.io.*;

public class SilentRadio extends Application 
{
   static ArrayList<String> fileArray;
   static String str = new String();
   static Text display, errorDisplay;
   //******************************start()*******************************
   @Override
   public void start(Stage stg) throws Exception
   {
      stg.setTitle("Silent Radio");
      FlowPane main = new FlowPane(10, 10);
      main.setAlignment(Pos.CENTER); 
      Scene m = new Scene(main, 500, 500);
      stg.setScene(m);

      Label fileLable = new Label(
            "Enter file name here: ");
      TextField tf = new TextField();
      Button submit = new Button("Start");
      display = new Text();
      display.setFont(Font.font ("Verdana", 20));
      errorDisplay = new Text();
      errorDisplay.setFill(Color.RED);
      
      ColorPicker cp = new ColorPicker(Color.BLACK);
      cp.setOnAction((event) ->  
      {
         display.setFill(cp.getValue()); 
      }); 
      
      Slider sl = new Slider();
      sl.setMin(-50);
      sl.setMax(+50);
      sl.setMajorTickUnit(50);
      sl.setBlockIncrement(4);
      sl.setMinorTickCount(4);
      sl.setShowTickLabels(true);
      sl.setShowTickMarks(true);
      
      submit.setOnAction((event) -> {
         str = tf.getText().trim();
         boolean startRun = readFile(str);
         if (startRun && !(tf.getText().trim()).isEmpty())
         {
            Thread thread = new Thread(() -> {
               double speed;
               for (int index = 0; index < fileArray.size(); index++)
               {
                  String str = fileArray.get(index);
                  Date start = new Date();
                  Date end = new Date();
                  while (end.getTime() - start.getTime() < 10000)
                  {
                     speed = sl.getValue();
                     if (speed > -0.1 && speed < 0.1)
                     {
                        display.setText(str);
                        speed = 1;
                     } else if (speed < 0)
                     {
                        display.setText(moveLeft(str));
                        str = moveLeft(str);
                     } else
                     {
                        display.setText(str);
                        str = moveRight(str);
                     }
                     try
                     {
                        Thread.sleep((long) (5000 / Math.abs(speed)));
                     } catch (InterruptedException e)
                     {
                        errorDisplay.setText("The application is not responding");
                     }
                     end = new Date();
                  }
               }
            });
            thread.start();
         } else
         {
            tf.setPromptText("Please enter a file name");
         }
         tf.clear();
      });
      main.getChildren().addAll(fileLable, tf, submit, cp, sl, display, errorDisplay);
      stg.show();
   }
   //*****************************readFile()******************************
   public static boolean readFile(String fileName)
   {
      boolean found = false;
      errorDisplay.setText("");
      File newFile = new File(fileName);
      if (!newFile.exists())
      {
            errorDisplay.setText("Error: " + fileName + " cannot be found" );
      }
      if (newFile.canRead() && newFile.isFile())
      {
         try (Scanner scanner = new Scanner(newFile);)
         {
            fileArray = new ArrayList<>();
            while (scanner.hasNextLine())
            {
               fileArray.add(scanner.nextLine() + " ");
            }
            found = true;
         } catch (FileNotFoundException e)
         {
            errorDisplay.setText(fileName + " has not been found");
         }
      }
      return found;
   }
   //*****************************moveLeft()******************************
   public static String moveLeft(String line)
   {
      return line.substring(1, line.length()) + line.charAt(0);
   }
   //*****************************moveRight()******************************
   public static String moveRight(String line) 
   {
      return line.charAt(line.length() - 1) + line.substring(0, line.length() - 1);
   }
   //*******************************main()********************************
   public static void main(String[] args)
   {
      launch(args);
   }
}
